{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["SystemProgram","web3","arr","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","Keypair","fromSecretKey","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","TWITTER_HANDLE","TWITTER_LINK","App","React","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","checkIfWalletIsConnected","a","console","log","window","solana","isPhantom","connect","onlyIfTrusted","response","publicKey","toString","alert","error","connectWallet","disconnectWallet","disconnect","sendGif","length","provider","getProvider","program","Program","rpc","addGif","accounts","getGifList","upvoteGif","gifUrl","updateGifVotes","connection","Connection","Provider","createGifAccount","startStuffOff","user","wallet","systemProgram","programId","signers","walletListener","e","addEventListener","removeEventListener","account","fetch","className","onClick","type","placeholder","value","onChange","target","map","item","index","alt","src","userAddress","votes","twitterLogo","href","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.35b3c34f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.d89d9a86.svg\";","import * as React from 'react'\nimport twitterLogo from './assets/twitter-logo.svg'\nimport './App.css'\nimport {Connection, PublicKey, clusterApiUrl} from '@solana/web3.js'\nimport {Program, Provider, web3} from '@project-serum/anchor'\nimport kp from './keypair.json'\n\nimport idl from './idl.json'\n\n// SystemProgram is a reference to the Solana runtime!\nconst {SystemProgram} = web3\n\n// Create a keypair for the account that will hold the GIF data.\n// let baseAccount = Keypair.generate() // returns some params we need to create the BaseAccount\nconst arr = Object.values(kp._keypair.secretKey)\nconst secret = new Uint8Array(arr)\nconst baseAccount = web3.Keypair.fromSecretKey(secret)\n\n// Get our program's id form the IDL file.\nconst programID = new PublicKey(idl.metadata.address)\n\n// set our network to devnet\nconst network = clusterApiUrl('devnet')\n\n// Controls how we want to acknowledge the transaction.is \"done\"\nconst opts = {\n  // choose when to receive confirmation of successful transaction\n  preflightCommitment: 'processed', // processed = acknowledged by one node\n}\n\n// Constants\nconst TWITTER_HANDLE = '2kabore4'\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`\n// For testing until we have the program deployed\n// const TEST_GIFS = [\n//   'https://i.giphy.com/media/eIG0HfouRQJQr1wBzz/giphy.webp',\n//   'https://media3.giphy.com/media/L71a8LW2UrKwPaWNYM/giphy.gif?cid=ecf05e47rr9qizx2msjucl1xyvuu47d7kf25tqt2lvo024uo&rid=giphy.gif&ct=g',\n//   'https://media4.giphy.com/media/AeFmQjHMtEySooOc8K/giphy.gif?cid=ecf05e47qdzhdma2y3ugn32lkgi972z9mpfzocjj6z1ro4ec&rid=giphy.gif&ct=g',\n//   'https://media2.giphy.com/media/F3tPNVyStwEq4/giphy.gif?cid=790b761170ef3c64abc598c7854dbd60c594f4e974b710cd&rid=giphy.gif&ct=g',\n//   'https://i.giphy.com/media/PAqjdPkJLDsmBRSYUp/giphy.webp',\n//   'https://media2.giphy.com/media/MaXYVi4y8xqcFeotvt/giphy.gif?cid=ecf05e473ajb5uhxu7gdsmx69wkw9awa9xmh7g735xy1ffv6&rid=giphy.gif&ct=g',\n//   'https://media4.giphy.com/media/xR0ouBaSOzrZWd4fXS/giphy.gif?cid=ecf05e47lsluww4c9trc14nu3f9dq9696ogrcxkml3a34661&rid=giphy.gif&ct=g',\n// ]\n\nconst App = () => {\n  const [walletAddress, setWalletAddress] = React.useState(null)\n  const [inputValue, setInputValue] = React.useState('')\n  // const [gifList, setGifList] = React.useState(TEST_GIFS)\n  const [gifList, setGifList] = React.useState(null)\n\n  /*\n   * This function holds the logic for deciding if a Phantom Wallet is\n   * connected or not\n   */\n  const checkIfWalletIsConnected = async () => {\n    console.log('------checkIfWalletIsConnected()------')\n    try {\n      const {solana} = window\n      if (solana && solana.isPhantom) {\n        console.log('Phantom Wallet found!')\n\n        /*\n         * The solana object gives us a function that will allow us to connect\n         * directly with the user's wallet!\n         */\n        const response = await solana.connect({onlyIfTrusted: true})\n        console.log('response:', response)\n        /*\n         * The response object has a publicKey property that holds the\n         * public key of the user's wallet. We can use this to get the\n         * address of the user's wallet.\n         */\n        console.log('Connected with Public Key:', response.publicKey.toString())\n        // Set the user's publicKey in state to be used later!\n        setWalletAddress(response.publicKey.toString())\n      } else {\n        alert('Solana Object not found! Get a Phantom Wallet ðŸ‘»')\n      }\n    } catch (error) {\n      console.error('error:', error)\n    }\n  }\n\n  /*\n   * Let's define this method so our code doesn't break.\n   * We will write the logic for this next!\n   */\n  const connectWallet = async () => {\n    console.log('------connectWallet()------')\n    const {solana} = window\n    if (!solana) return\n    try {\n      const response = await solana.connect()\n      console.log('Connected with Public Key:', response.publicKey.toString())\n      setWalletAddress(response.publicKey.toString())\n    } catch (error) {\n      console.error('error:', error)\n    }\n  }\n\n  const disconnectWallet = async () => {\n    console.log('------disconnectWallet()------')\n    const {solana} = window\n    if (!solana) return\n    try {\n      await solana.disconnect()\n      console.log('Disconnecting wallet with Public Key:', walletAddress)\n\n      setWalletAddress(null)\n    } catch (error) {\n      console.error('Error disconnecting wallet:', error)\n    }\n  }\n\n  const sendGif = async () => {\n    console.log('------sendGif()------')\n    if (!inputValue.length) {\n      console.log('No gif url given.')\n      return\n    }\n    console.log('gifUrl:', inputValue)\n\n    try {\n      const provider = getProvider()\n      const program = new Program(idl, programID, provider)\n\n      await program.rpc.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n        },\n      })\n      console.log('GIF sucesfully sent to program', inputValue)\n\n      await getGifList()\n    } catch (error) {\n      console.log('Error sending Gif:', error)\n    }\n  }\n\n  const upvoteGif = async gifUrl => {\n    console.log('------upvoteGif()------')\n    const provider = getProvider()\n    const program = new Program(idl, programID, provider)\n    try {\n      await program.rpc.updateGifVotes(gifUrl, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n        },\n      })\n\n      await getGifList()\n    } catch (error) {\n      console.log('Error upvoting Gif:', error)\n    }\n  }\n\n  // Provider = authenticated connection to the blockchain (solana in this case)\n  const getProvider = () => {\n    console.log('------getProvider()------')\n    const connection = new Connection(network, opts.preflightCommitment)\n    // to make a provider we need a connected wallet -\n    // meaning the app has to be authorized by user to connect to their wallet\n    const provider = new Provider(\n      connection,\n      window.solana,\n      opts.preflightCommitment,\n    )\n    console.log('provider:', provider)\n    return provider\n  }\n\n  const createGifAccount = async () => {\n    console.log('------createGifAccount()------')\n    try {\n      const provider = getProvider()\n      const program = new Program(idl, programID, provider)\n      console.log('ping')\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount],\n      })\n      console.log(\n        'Created a new BaseAccount w/ address:',\n        baseAccount.publicKey.toString(),\n      )\n      await getGifList()\n    } catch (error) {\n      console.log('Error creating BaseAccount account:', error)\n    }\n  }\n  /*\n   * We want to render this UI when the user hasn't connected\n   * their wallet to our app yet.\n   */\n  // const renderNotConnectedContainer = () => (\n  //   <button\n  //     className=\"cta-button connect-wallet-button\"\n  //     onClick={connectWallet}\n  //   >\n  //     Connect to Wallet\n  //   </button>\n  // )\n  /**\n   * Renders the connected container. Needs to handle:\n   * 1. User has connected their wallet, but BaseAccount account has not been created.\n   *    - Give them a button to create account.\n   * 2. User has connected their wallet, and BaseAccount account has been created.\n   *   - render the gifList\n   */\n  const renderConnectedContainer = () => {\n    // If we hit this, it means the program account hasn't be initialized.\n    if (gifList === null) {\n      return (\n        <div className=\"connected-container\">\n          <button\n            className=\"cta-button submit-gif-button\"\n            onClick={createGifAccount}\n          >\n            Do One-Time Initialization For GIF Program Account\n          </button>\n        </div>\n      )\n    }\n\n    return (\n      <div className=\"connected-container\">\n        <input\n          type=\"text\"\n          placeholder=\"Enter gif link!\"\n          value={inputValue}\n          onChange={({target: {value}}) => setInputValue(value)}\n        />\n        <button className=\"cta-button submit-gif-button\" onClick={sendGif}>\n          Submit\n        </button>\n        <div className=\"gif-grid\">\n          {/* We use index as the key instead, also, the src is now item.gifUrl */}\n          {gifList.map((item, index) => (\n            <div key={index}>\n              <div className=\"gif-item\">\n                <img alt=\"gif\" src={item.gifUrl} />\n              </div>\n              <div className=\"gif-item-details\">\n                <p>Owner: {item.userAddress.toString()}</p>\n              </div>\n              <div className=\"gif-item-details\">\n                <p>Votes: {item.votes.toString()}</p>\n                <button\n                  className=\"cta-button vote-gif-button\"\n                  onClick={async () => await upvoteGif(item.gifUrl)}\n                >\n                  Upvote\n                </button>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    )\n  }\n\n  /*\n   * Checks if wallet is connected to the window object when the component mounts\n   */\n  React.useEffect(() => {\n    const walletListener = async e => {\n      await checkIfWalletIsConnected()\n    }\n    window.addEventListener('load', walletListener)\n    // cleanup function\n    return () => {\n      window.removeEventListener('load', walletListener)\n    }\n  }, [])\n\n  /** Gets the list of gifs from our program base account */\n  const getGifList = async () => {\n    console.log('------getGifList()------')\n    try {\n      const provider = getProvider()\n      const program = new Program(idl, programID, provider)\n      const account = await program.account.baseAccount.fetch(\n        baseAccount.publicKey,\n      )\n      console.log('program account:', account)\n      setGifList(account.gifList)\n      console.log('setGifList:', account.gifList)\n    } catch (error) {\n      console.log('error in getGifList:', error)\n      setGifList(null)\n    }\n  }\n  /*\n   * Fetches and sets the gifs in state when the walletAddress first changes to defined\n   */\n  React.useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching GIF list...')\n\n      // call solana program here\n\n      // set state with the gif list\n      // setGifList(TEST_GIFS)\n\n      getGifList()\n    }\n  }, [walletAddress])\n\n  return (\n    <div className=\"App\">\n      <div className=\"wallet-container\">\n        {!walletAddress ? null : (\n          <button\n            className=\"cta-button disconnect-wallet-button\"\n            onClick={disconnectWallet}\n          >\n            Disconnect Wallet\n          </button>\n        )}\n      </div>\n\n      <div className={walletAddress ? 'authed-container' : 'container'}>\n        <div className=\"header-container\">\n          <p className=\"header\">ðŸ–¼ GIF Portal</p>\n          <p className=\"sub-text\">\n            Show the metaverse your spirit in a GIF âœ¨ðŸ¦„\n          </p>\n          {\n            // connected wallet\n            walletAddress ? (\n              renderConnectedContainer()\n            ) : (\n              <button\n                className=\"cta-button connect-wallet-button\"\n                onClick={connectWallet}\n              >\n                Connect to Wallet\n              </button>\n            )\n          }\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <p className=\"footer-text\">\n            built by{' '}\n            <a\n              className=\"footer-text\"\n              href={TWITTER_LINK}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >{`@${TWITTER_HANDLE}`}</a>{' '}\n            with{' '}\n            <a\n              className=\"footer-text\"\n              href={'https://twitter.com/_buildspace'}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              @_buildspace\n            </a>\n          </p>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}